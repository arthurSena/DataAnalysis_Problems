dlb_var <- c("a","a","b")
x <- 1
print(x)
x
msg <- "hello world"
msg
print msg
print (msg)
print(msg)
x <- (1 to 20)
x <- (1)
x
x <- (1,2,3,4,5,6,7,8,9)
x <- [1,2,3,4,5,6,7,8,9]
x <- c(1,2,3,4,5,6,7,8,9)
x
x[]
x[0]
x[5]
x[1]
> data <- read.csv("/home/arthur/Desktop/data.csv" , header = TRUE)
data <- read.csv("/home/arthur/Desktop/data.csv" , header = TRUE)
data
class(data)
data[1,2]
View(data)
data[1,]
data[1:2,]
nrow(data)
data[nrow(data) - 1:nrow(data),]
data[152:153,]
data[(row(data)-1) : nrow(data),]
data[(row(data)-1): nrow(data),]
data[152:153,]
data["Ozone"]
rownames(data)
data[47]
data[47,]
data["Ozone"]
class(data["Ozone"])
data["Ozone"][,2]
data["Ozone"][,1]
class(data["Ozone"][,1])
temp <- class(data["Ozone"][,1])
temp
temp[0]
grepl("a","a")
grepl("a","b")
grepl("a","ba")
grepl("a","sadfasd")
grep("a","a")
grep("a","b")
grep("a","c")
grep("a","c") == 0
grepl("a","sadfasd")
temp
View(data)
temp[0]
print
print(temp)
temp[grep("NA",temp)]
is.na(temp)
temp
x <- c("a", "b")
is.na(x)
temp
temp[2]
temp[2]
temp[8]
data
data["Ozone"]
data["Ozone"][2]
data["Ozone"][1]
class(data["Ozone"][1])
is.na(data["Ozone"][1])
x <- 0
if is.na(data["Ozone"][1])
if (is.na(data["Ozone"][1]))
x <- x + 1
factor(is.na(data["Ozone"][1]))
summary(factor(is.na(data["Ozone"][1])))
x <- function(a,b) {}
x <- function(a,b) {
a+b+c
}
x(1,2)
c <- 10
c <- 10
x(1,2)
search()
x <<- 10
x
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
x <-0
x <- 1:10
if (x>5) {x <- 0}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
f <- function(x) {
g <- function(y) {
y + z
}
x + g(x)
}
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector()
makeVector(10)
makeVector(10)$get
makeVector(10)$get()
makeVector(10)$getmean()
makeVector()
makeVector(c(1,2,3,4))
makeVector(c(1,2,3,4))$getmean()
makeVector(c(1,2,3,4))$getmean()
cachemean(c(1,2,3))
cachemean(10
)
cachemean(10)
cachemean(makeVector(c(1,2,3,4)))
x <- makeVector(c(1,2,3,4))
cachemean(x)
x$getmean()
x
x$get
x$get()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
println(10)
print(10)
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL
set <-function(newMatrix) {
x <<- newMatrix
inverse <<- NULL
}
get <- function() x
setInverse(newInverse) function inverse <<- newInverse
getInverse <- function() inverse
}
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL
set <-function(newMatrix) {
x <<- newMatrix
inverse <<- NULL
}
get <- function() x
setInverse(newInverse) function inverse <<- newInverse
getInverse <- function() inverse
list(set=set,get=get,setInverse=setInverse,getInverse=getInverse)
}
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL
set <-function(newMatrix) {
x <<- newMatrix
inverse <<- NULL
}
get <- function() x
setInverse <- function(newInverse) inverse <<- newInverse
getInverse <- function() inverse
list(set=set,get=get,setInverse=setInverse,getInverse=getInverse)
}
makeCacheMatrix
makeVector
$makeVector()
$makeVector
makeVector
makeVector()
makeCacheMatrix()
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inverse <- x$getInverse
if(!is.null(inverse)){
message("getting cached inverse matrix")
return(inverse)
}
matrix <- x$get
x$setInverse(solve(matrix))
x$getInverse
}
matrix <- matrix(1:9 , nrow3, ncol = 3)
matrix <- matrix(1:9 , nrow=3, ncol = 3)
matrix
cachedMatrix <- makeCacheMatrix(matrix)
cachedMatrix
cachedMatrix$get
cachedMatrix$get()
cachedMatrix$getInverse()
cacheSolve(matrix)
matrix()
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inverse <- x$getInverse()
if(!is.null(inverse)){
message("getting cached inverse matrix")
return(inverse)
}
matrix <- x$get()
x$setInverse(solve(matrix))
x$getInverse()
}
cacheSolve(matrix)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inverse <- x$getInverse()
if(!is.null(inverse)){
message("getting cached inverse matrix")
return(inverse)
}
matrix <- x$get()
temp <- solve(matrix)
x$setInverse(temp)
temp
}
cacheSolve(matrix)
cacheSolve(matrix(1:9 , nrow=3, ncol = 3))
cacheSolve(matrix)
rnorm(10,0,1)
x<-rnorm(10,0,1)
summary(x)
sample(LETTERS, 5)
sample(LETTERS, 5)
sample(LETTERS, 5)
sample(LETTERS, 5)
set.seed(1)
sample(LETTERS, 5)
sample(LETTERS, 5)
set.seed(1)
sample(LETTERS, 5)
sample(LETTERS, 5)
set.seed(2)
sample(LETTERS, 5)
sample(LETTERS, 5)
set.seed(2)
sample(LETTERS, 5)
set.seed(1)
sample(LETTERS, 5)
???set.seed
???set.seed
x <- rep(0:1, each = 5)
x
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
summary(y)
y
plot(y)
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
R.version.string
install.packages("swirl")
library(swirl)
library(swirl)
install.packages("swirl",dependencies = NA)
setwd("/home/arthur/Documents/AD1/DataAnalysis_Problems/Problema1")
library("ggplot2")
salariosTI <- read.csv("salarios-ti-refinado.csv")
profissional_sem_pos <- salariosTI[salariosTI$Pos.Graduacao.ou.Certificacao == FALSE,]
profissional_com_pos <- salariosTI[salariosTI$Pos.Graduacao.ou.Certificacao == TRUE,]
medianaSalarial_sem_pos <- median(profissional_sem_pos$Salario.Bruto)
medianaSalarial_com_pos <- median(profissional_com_pos$Salario.Bruto)
medianaSalarial_com_pos <- c(medianaSalarial_com_pos)
medianaSalarial_sem_pos <- c(medianaSalarial_sem_pos)
data <- data.frame(medianaSalarial_com_pos,medianaSalarial_sem_pos)
barplot(as.matrix(data))
print(medianaSalarial_com_pos)
print(medianaSalarial_com_pos-medianaSalarial_sem_pos)
require(devtools)
install_github('rCharts', 'ramnathv')
iris
names(iris) = gsub("\\.", "", names(iris))
hair_eye = as.data.frame(HairEyeColor)
rPlot(Freq ~ Hair | Eye, color = 'Eye', data = hair_eye, type = 'bar')
library("rCharts")
rPlot(Freq ~ Hair | Eye, color = 'Eye', data = hair_eye, type = 'bar')
View(hair_eye)
data
rplot(data)
rPlot(data)
data
MedianaSalarial <- c(medianaSalarial_com_pos, medianaSalarial_sem_pos)
MedianaSalarial
data.frame(MedianaSalarial,nrow = 2)
data.frame(MedianaSalarial)
temp <- data.frame(MedianaSalarial)
rownames(temp)
rownames(temp) <- c("Com Pos","Sem Pos")
temp
chart <- ggplot(temp, aes(Com Pos,MedianaSalarial))
temp
MedianaSalarial <- c("medianaSalarial_com_pos", "medianaSalarial_sem_pos")
data.frame(MedianaSalarial)
dataFrame(comPos = c(medianaSalarial_com_pos))
data.frame(comPos = c(medianaSalarial_com_pos))
data.frame(comPos = c(medianaSalarial_com_pos),semPos = c(medianaSalarial_sem_pos))
temp <- data.frame(comPos = c(medianaSalarial_com_pos),semPos = c(medianaSalarial_sem_pos))
rownames(temp) <- c("Mediana")
temp
rPlot(Mediana ~ comPos | data = temp, type = 'bar')
temp
chart <- ggplot(temp, aes(Mediana,comPos))
chart + geom_bar(stat = "identity")
bacharel_profissional <- salariosTI[salariosTI$Formacao = "Bacharel em Ciência da Computação",]
bacharel_profissional <- salariosTI[salariosTI$Formacao == "Bacharel em Ciência da Computação",]
privado <- salariosTI[salariosTI$Iniciativa.Privada.ou.Concursado == "Iniciativa Privada",]
publico <- salariosTI[salariosTI$Iniciativa.Privada.ou.Concursado == "Concursado",]
matrix(c(1,2,3),c(1,2,3))
matrix(c(1,2,3)
)
medianaSal_privado <- c(median(privado$Salario.Bruto))
medianaSal_publico <- c(median(publico$Salario.Bruto))
boxplot(matrix(medianaSal_privado,medianaSal_publico))
barplot(matrix(medianaSal_privado,medianaSal_publico))
data <- data.frame(medianaSalarial_com_pos,medianaSalarial_sem_pos)
barplot(as.matrix(data))
medianaSal_privado <- c(median(privado$Salario.Bruto))
medianaSal_publico <- c(median(publico$Salario.Bruto))
data <- data.frame(medianaSalarial_publico,medianaSalarial_privado)
data <- data.frame(medianaSal_publico,medianaSal_privado)
barplot(as.matrix(data))
data(economics, package = "ggplot2")
econ <- transform(economics, date = as.character(date))
m1 <- mPlot(x = "date", y = c("psavert", "uempmed"), type = "Line", data = econ)
m1$set(pointSize = 0, lineWidth = 1)
m1$print("chart2")
data(economics, package = "ggplot2")
econ <- transform(economics, date = as.character(date))
m1 <- mPlot(x = "date", y = c("psavert", "uempmed"), type = "Line", data = econ)
m1$set(pointSize = 0, lineWidth = 1)
m1$print("chart2")
View(m1)
hair_eye_male <- subset(as.data.frame(HairEyeColor), Sex == "Male")
n1 <- nPlot(Freq ~ Hair, group = "Eye", data = hair_eye_male, type = "multiBarChart")
n1$print("chart3")
library("rCharts")
hair_eye_male <- subset(as.data.frame(HairEyeColor), Sex == "Male")
n1 <- nPlot(Freq ~ Hair, group = "Eye", data = hair_eye_male, type = "multiBarChart")
n1$print("chart3")
hair_eye_male <- subset(as.data.frame(HairEyeColor), Sex == "Male")
n1 <- nPlot(Freq ~ Hair, group = "Eye", data = hair_eye_male, type = "multiBarChart")
n1$print("chart3")
hair_eye = as.data.frame(HairEyeColor)
rPlot(Freq ~ Hair | Eye, color = 'Eye', data = hair_eye, type = 'bar')
View(hair_eye)
salariosTI
ggplot(data = salariosTI)
library("ggplot2")
qplot(data = salariosTI,x = Experiencia.Profissional,y = Salario.Bruto)
privado <- salariosTI[salariosTI$Iniciativa.Privada.ou.Concursado == "Iniciativa Privada",]
publico <- salariosTI[salariosTI$Iniciativa.Privada.ou.Concursado == "Concursado",]
medianaSal_privado <- c(median(privado$Salario.Bruto))
medianaSal_publico <- c(median(publico$Salario.Bruto))
data <- data.frame(medianaSal_publico,medianaSal_privado)
barplot(as.matrix(data))
data
mediana <- c(medianaSal_publico,medianaSal_privado)
mediana
tipoDeProfisional <- c("publico","privado")
data <- data.frame(tipoDeProfisional,mediana)
data
chart <- ggplot(data, aes(tipoDeProfisional,mediana))
chart + geom_bar(stat = "identity")
sdadads
qplot(Experiencia.Profissional, data=salariosTI, weight=Salario.Bruto, geom="histogram")
hair_eye = as.data.frame(HairEyeColor)
rPlot(Freq ~ Hair | Eye, color = 'Eye', data = hair_eye, type = 'bar')
hair_eye = as.data.frame(HairEyeColor)
rPlot(Freq ~ Hair | Eye, color = 'Eye', data = hair_eye, type = 'bar')
